embedded-customized

program vs process

program:secondary

process:RAM

process memory /address space

It has 4 parts :data , code,stack,heap

.c -- c compiler---then it becomes process

**data :
global
static (local or global)/
initialized data(hard coded data )...called as string pool ..printf

all global and static variables store 0 as value by default

all the variables will remain intact before main starts and till last line execited

** Code

instructions of main() or func1()are stored

Also called text or instruction segment

all the instructions will remain intact before main starts and till last line execited

**Stack

It has main function stack frame
Local variables go into stack frame
Whenever a new function is called ..new stack frame for that function
Local variables of function destroyed , whenever fn is over and stack frame is also destroyed

**Heap

Dynamic allocation 
D.A not used in embedded because of resource constraint(eg 80 bytes RAM)
Dynamic memeory must be frred by our own:else Memory leakage

--------------
Computer:understands only 0 and 1,,therfore compiler convets high to low
gcc memory_map.c -o mmap
./mmap
map is my choice executable name


valgrind ./mmap  (To check for memory leakage)
printf by default has  1 allocation and 1 free

When rerrunning program , program may be assigned a different address

-----------------------------------------------------

C (32 keywords )

Primitive Data types:int,char,float,double

Data modifier:short,long,signed,unsigned

Storage classes:auto,static,extern,register

Flow Control:if,else, for ,while,switch,case,default,break,continue,goto,do

UDDT:struct,union,typedef,enum

Miscellaneous:void,constant,sizeof,volatile,return 

3 types of operators:

1)Unary (++,--)
2)Binary
Arithmetic/Relational/Logical(&& || ! )/Bitwise(& | >> << ^ ~ )/Shorthand (+= -=)
3)Ternary(?:)


------------------

print stmt not good for unit testing
#define True 1
#define False 0

= and == can  give runtime errors

MISRA guideline
if(100 == num)
if(100 = num )//it will give compilation error

but if(num=100)//it will give runtime error

it is easier to track compilation error
--------------------------------------------------

char holds 8 bits
7th bit -sign bit   ... 0 positive   1 negative 
0 to 6 = -127 to 127
char is signed by default

unsigned char has no bit for sign and stores only +ve value
%d -signed
%u -unsigned
%x - hexadecimal
q)why for signed char 250 gives -6

***unsigned char=-5

00000101
negative numbers are stored as 1s complement
11111010=250
---------------------------------------------------------------

Integer has 32 bits

in hexa 0x...:4 bits are 1 number

in octal 0...:3 bits are 1 number

--------------------------------------------------------------
left shift
int num=65
num=num<<1 //130
num=num<<2 //260

multiplied by 2^no of time shifting
(rest as 0)

---------------------------------------------
right shift
divided by 2^ no of time shifting

-------------------------------------------

#define BIT_4 1<<4
only 4th bit is set bit ..rest are 0

---------------------------------------------
&  clear and check

|  setting a bit

^  toggling and swapping

~ negating or inverting

-----------------------------------------------

Eg:Coffee vending nachhine ....many buttons ,,,,click 1 button

see if it is set to  1 or not

----------------------------------------------------------

//&-  check

a)BIT MASKING


//Check whether 4th bit is set or not
#include <stdio.h>
#define BIT_6 1<<6

int main() {
   int num;
   printf("Enter a number");
   scanf("%d",&num);
   
   if((num & BIT_6)==0)
   {
       printf("Bit is set to 0 /OFF\n");
   }
   else
   {
        printf("Bit is set to 1 /ON\n");
   }
   
   

    return 0;
}



b)int to binary using 31 times BIT Masking


//  Decimal to binary
#include <stdio.h>

int main() {
   
   int num;
   printf("Enter a number");
   scanf("%d",&num);
   for(auto int i=31;i>=0;i--)
   {
       int maskbit=1<<i;
       if((num & maskbit)==0)
       {
           printf("0");
       }
       else
       {
           printf("1");
       }
   }
  
   
   

    return 0;
}



--------------------------------------------------------

// | - set as 1

Set a particular bit as 1 and rest are unaffected

//  Set a particular bit as 1

#include <stdio.h>
#define BIT_6 1<<6

void displayBinary(int num)
{
     for(auto int i=31;i>=0;i--)
   {
       int maskbit=1<<i;
       if((num & maskbit)==0)
       {
           printf("0");
       }
       else
       {
           printf("1");
       }
   }
   printf("\n");
}
int main() {
   
   int num;
   printf("Enter a number");
   scanf("%d",&num);
   displayBinary(num);
   
   num=num | BIT_6;
   displayBinary(num);
    return 0;
}

Set 3 particular bit as 1 and rest are unaffected 

//  Set multiple  bit as 1

#include <stdio.h>
#define BIT_6 1<<6
#define BIT_5 1<<5
#define BIT_8 1<<8

void displayBinary(int num)
{
     for(auto int i=31;i>=0;i--)
   {
       int maskbit=1<<i;
       if((num & maskbit)==0)
       {
           printf("0");
       }
       else
       {
           printf("1");
       }
   }
   printf("\n");
}
int main() {
   
   int num;
   printf("Enter a number");
   scanf("%d",&num);
   displayBinary(num);
   
   num=num | BIT_6 | BIT_5 | BIT_8;
   displayBinary(num);
    return 0;
}



-------------------------------------------------------------

// & -clear (bitmask with 0)
//  Set a particular bit as 0

#include <stdio.h>
#define BIT_2 1<<2


void displayBinary(int num)
{
     for(auto int i=31;i>=0;i--)
   {
       int maskbit=1<<i;
       if((num & maskbit)==0)
       {
           printf("0");
       }
       else
       {
           printf("1");
       }
   }
   printf("\n");
}
int main() {
   
   int num;
   printf("Enter a number:");
   scanf("%d",&num);
   displayBinary(num);
   
   num=num & ~(BIT_2);
   displayBinary(num);
    return 0;
}
negate also done

---------------------------------------------------------
// ^ - toggle 

negate is changing status of all bits

toggling is changing status of selected bits

a)1 code for toggle

//  Toggle multiple Bits

#include <stdio.h>
#define BIT_3 1<<3
#define BIT_4 1<<4
#define BIT_5 1<<5
#define BIT_6 1<<6


void displayBinary(int num)
{
     for(auto int i=31;i>=0;i--)
   {
       int maskbit=1<<i;
       if((num & maskbit)==0)
       {
           printf("0");
       }
       else
       {
           printf("1");
       }
   }
   printf("\n");
}
int main() {
   
   int num;
   printf("Enter a number:");
   scanf("%d",&num);
   displayBinary(num);
   
   num=num ^ (BIT_3|BIT_4|BIT_5|BIT_6);
   displayBinary(num);
    return 0;
}

b)1 code for swapping 

#include <stdio.h>

int main() {
   
   int num1,num2;
   printf("Enter 1st  number:");
   scanf("%d",&num1);
   
      printf("Enter 2nd number:");
   scanf("%d",&num2);
   
   printf("%d\t %d\n ",num1,num2);
 
 num1=num1 ^ num2;
 num2=num1 ^ num2;
 num1=num1 ^ num2;
 
 /*
 n1=n1+n2
 n2=n1-n2
 n1=n1-n2
 */
 printf("%d\t %d\n ",num1,num2);
 
    return 0;
}

--------------------------------------------------------------------------


 C MODULAR PROGRAMMING

Divide a large prg into many files

All fns must be atleast declared before main

header file : to declare the function + declaring global variables

eg: 

1)myfunctions.h
extern int isprime(int num);
//extern means declaring at one place and defining at other file


2)mainapp.c

#include "myfunctions.h"

3)evenodd.c

int isEvenOdd(int num)
{
......
}



Note: Neither of 3 files can execute on their own independently

implicit declaration: warning

undefined reference : definition error

gcc mainapp.c evenodd.c perfect.c prime.c palindrome.c -o myapp
./myapp


--------------------------------------------------------------------------------------------------

ARRAYS

Difficult to declare n number of variables

array declaration : int arr[500];

size of:%ld

name of array gives base address of array =>num == &num[0]

address:%p

int num[5]={11,12};
if some elements arent initialized=> Rest all are set to 0

int num[]={11,12};
//array size is 8


Array address starts from zero =>Efective address and offset


auto =>makes variable only accessible in that block

eg: for( auto int i=0;i<10;i++)
{
...

}

//i cannot be used here

Note: if -o not used : by default a.out object file


CHARACTER ARRAYS

char arr[20];

STRINGS

char arr[20]="hello";
terminated by null character whose ascii is 0
size:20 bytes

char arr[]="hello"
size:6 bytes

** Size of depends on max allocation


**Printing strings

1) for(auto int i=0;arr[i]!='\0';i++)
{
printf("%c",arr[i]);
}

//arr[i]!='\0' compares ASCII value

2)printf("%s",arr);

//%s needs the address and goes till /0

//scanf doesnt read string with spaces

So gets(arr) is used but it may cause overflow and shows warning  :) stack overflow



//fgets(arr,20,stdin);
only reads the first 20 characters


scanf vs gets vs fgets



================================================================================================

ASSIGNMENT1

Reverse a string using 1) swapping 2) using 2 character arrays


a)

// Online C compiler to run C program online
#include <stdio.h>
#include<string.h>

int main() {
    // Write C code here
    char data[20];
    printf("Enter a string:\n");
    fgets(data,20,stdin);
    
    printf("Original string is :%s\n",data);
    
    
    int size=strlen(data);
    
    int i=0,j=size-1;
    
    while(i<j)
    {
        char temp;
        temp=data[i];
        data[i]=data[j];
        data[j]=temp;
        
        i++;
        j--;
        
    }
    
    printf("Reversed string is :%s\n",data);

    return 0;
}

b)

// Online C compiler to run C program online
#include <stdio.h>

int main() {
   char data1[20];
    printf("Enter a string:\n");
    fgets(data1,20,stdin);
    
    printf("Original string is :%s\n",data1);
    
    char data2[20];
    
    
    int size=strlen(data1);
    
    int i=0;
    
    while(i<size)
    {
        data2[i]=data1[size-i-1];
        i++;
        
    }
    
    printf("Reversed string is :%s\n",data2);

    return 0;
}
==================================================================================================







































